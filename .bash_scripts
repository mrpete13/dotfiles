#Clone all used for ~/ 
#gitpullall() {
#    find . -name ".git" -type d | sed 's/\/.git//' |  xargs -P10 -I{} git -C {} pull
#}

# Display battery percentage
#batt() {
#    upower -i $(upower -e | grep BAT) | grep --color=never -E "state|to\full|to\ empty|percentage"
#}

ddg () {
    lynx "https://duckduckgo.com/?t=ffnt&q=$(echo $* | sed 's/[ ]/+/g')"
}

tube (){
	lynx "https://youtube.com/results?search_query=$(echo $* | sed 's/[ ]/+/g')"
}

zshadd () {
    echo "$@" >> ~/.zshrc
}

weather () {
    curl wttr.in
}

weather2 () {
    curl v2.wttr.in
}

moon () {
    curl wttr.in/moon
}

tlynx () {
    torsocks /usr/bin/lynx -noreferer $@
}

tcurl () {
    torsocks curl
}


function tre() {
	tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

function man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

function isup() {
	local uri=$1

	if curl -s --head  --request GET "$uri" | grep "200 OK" > /dev/null ; then
		notify-send --urgency=critical "$uri is down"
	else
		notify-send --urgency=low "$uri is up"
	fi
}

function open-localhost() {
    if [ $# -eq 0 ]; then
        chrome-cli http://localhost:3000
    else
        chrome-cli http://localhost:$1
    fi
}

function texthash() {
    echo -n $1 | md5sum | awk '{print "MD5 = " $1}'
    echo -n $1 | shasum | awk '{print "SHA1 = " $1}'
    echo -n $1 | sha256sum | awk '{print "SHA256 = " $1}'
}

function hogs() {
    ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head
}

function ramhogs() {
    ps axo rss,comm,pid \
    | awk '{ proc_list[$2]++; proc_list[$2 "," 1] += $1; } \
    END { for (proc in proc_list) { printf("%d\t%s\n", \
    proc_list[proc "," 1],proc); }}' | sort -n | tail -n 10 | sort -rn \
    | awk '{$1/=1024;printf "%.0fMB\t",$1}{print $2}'
}

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# FROM ARCH WIKI https://wiki.archlinux.org/title/Bash/Functions
# Display error codes
EC() {
	echo -e '\e[1;33m'code $?'\e[m\n'
}

extract() {
    local c e i

    (($#)) || return

    for i; do
        c=''
        e=1

        if [[ ! -r $i ]]; then
            echo "$0: file is unreadable: \`$i'" >&2
            continue
        fi

        case $i in
            *.t@(gz|lz|xz|b@(2|z?(2))|a@(z|r?(.@(Z|bz?(2)|gz|lzma|xz)))))
                   c=(bsdtar xvf);;
            *.7z)  c=(7z x);;
            *.Z)   c=(uncompress);;
            *.bz2) c=(bunzip2);;
            *.exe) c=(cabextract);;
            *.gz)  c=(gunzip);;
            *.rar) c=(unrar x);;
            *.xz)  c=(unxz);;
            *.zip) c=(unzip);;
            *.zst) c=(unzstd);;
            *)     echo "$0: unrecognized file extension: \`$i'" >&2
                   continue;;
        esac

        command "${c[@]}" "$i"
        ((e = e || $?))
    done
    return "$e"
}

#cd and ls in one
cl() {
	local dir="$1"
	local dir="${dir:=$HOME}"
	if [[ -d "$dir" ]]; then
		cd "$dir" >/dev/null; ls
	else
		echo "bash: cl: $dir: Directory not found"
	fi
}

#Simple note taker
note () {
    # if file doesn't exist, create it
    if [[ ! -f $HOME/.notes ]]; then
        touch "$HOME/.notes"
    fi

    if ! (($#)); then
        # no arguments, print file
        cat "$HOME/.notes"
    elif [[ "$1" == "-c" ]]; then
        # clear file
        printf "%s" > "$HOME/.notes"
    else
        # add all arguments to file
        printf "%s\n" "$*" >> "$HOME/.notes"
    fi
}

# To-Do list
todo() {
    if [[ ! -f $HOME/.todo ]]; then
        touch "$HOME/.todo"
    fi

    if ! (($#)); then
        cat "$HOME/.todo"
    elif [[ "$1" == "-l" ]]; then
        nl -b a "$HOME/.todo"
    elif [[ "$1" == "-c" ]]; then
        > $HOME/.todo
    elif [[ "$1" == "-r" ]]; then
        nl -b a "$HOME/.todo"
        eval printf %.0s- '{1..'"${COLUMNS:-$(tput cols)}"\}; echo
        read -p "Type a number to remove: " number
        sed -i ${number}d $HOME/.todo "$HOME/.todo"
    else
        printf "%s\n" "$*" >> "$HOME/.todo"
    fi
}

#Calculator


calc() {
    echo "scale=3;$@" | bc -l
}

#IP info - detailed info on an IP
ipif() { 
    if grep -P "(([1-9]\d{0,2})\.){3}(?2)" <<< "$1"; then
	 curl ipinfo.io/"$1"
    else
	ipawk=($(host "$1" | awk '/address/ { print $NF }'))
	curl ipinfo.io/${ipawk[1]}
    fi
    echo
}

# Bash function to add in .bashrc or .profile to idempotently setup an SSH agent
# for the current user

function setup_ssh {
  # set -x
  cagent=$( ps ux | awk '/ssh[-]agent/ {print $2}' );
  
  if [ -z ${cagent} ];
  then
  # Start a new ssh-agent with 24h expiration of keys
    eval $( /usr/bin/ssh-agent -t 86400 -s );
  else
  # Connect to the most recent ssh-agent
    SSH_AUTH_SOCK=$(
        find /tmp -maxdepth 2 -iname 'agent*' -uid $(id -u ) -print0 2>/dev/null | \
        xargs -0 stat -c "%Y %n" | \
        sort -n | \
        awk '{print $2; exit}'
    )
    export SSH_AGENT_PID=${cagent};
    echo "Agent PID: ${SSH_AGENT_PID}";
  fi

# Check if a key is already listed
    if ssh-add -l > /dev/null;
    then
        echo "Identity present in agent";
    else
    # Add default key to agent
        /usr/bin/ssh-add -t 43200;
    fi

    echo "Done"
}

# print size of all dirs and files in descending order within current dir
function printsize {
    sudo du -hsx $1* | sort -rh | head -10
}

# use inspect element tool for media links on pages that disable right click ->
# save as
function save-media {
    read -p 'Enter media URL to save: ' url
    read -p 'Enter name of file you wish to save media as: ' fname
    curl --output $fname $url
}
